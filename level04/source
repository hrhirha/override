#include <unistd.h>
#include <sys/types.h>
#include <sys/prctl.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <sys/ptrace.h>
#include <sys/wait.h>
#include <sys/reg.h>

#define ORIG_RAX 11

int	main()
{
	pid_t	pid;		/* esp+0xac */
	int		var1;		/* esp+0xa8 */
	int		var4;		/* esp+0xa4 */
	int		var3;		/* esp+0xa0 */
	char	var0[0x20];	/* esp+0x20 */
	int		var2;		/* esp+0x1c */

	pid = fork();
	memset(var0, 0, 0x20);
	var1 = 0;
	var2 = 0;
	if (pid == 0)
	{
		prctl(0x1, 0x1);
		// ptrace(0x0, 0x0, 0x0, 0x0);
		ptrace(PTRACE_TRACEME, 0x0, 0x0, 0x0);
		puts("Give me some shellcode, k");
		gets(var0);
		return (0);
	}
	else
	{
		while (1)
		{
			wait(&var2);
			var3 = var2;
			if (var3 & 0x7f == 0)
			{
				puts("child is exiting...");
				return (0);
			}
			var4 = var2;
			if (((var4 & 0x7f) + 0x1) / 0x2 > 0)
			{
				puts("child is exiting...");
				return (0);
			}
			// var1 = ptrace(0x3, pid, 0x2c, 0x0);
			var1 = ptrace(PTRACE_PEEKUSER, pid, 4 * ORIG_EAX, 0x0);
			if (var1 == 0xb)
			{
				puts("no exec() for you");
				kill(pid, 0x9);
				return (0);
			}
		}
	}
}
